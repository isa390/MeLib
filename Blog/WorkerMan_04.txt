<br>2022-06-10 11:09:36:协变，逆变，泛型转化以及转变，<br><br>2022-06-01 23:00:52:Initializing GLSurfaceView All you have to do to initialize a GLSurfaceView is call setRenderer(android.opengl.GLSurfaceView.Renderer). However, if desired, you can modify the default behavior of GLSurfaceView by calling one or more of these methods before calling setRenderer:<br><br>2022-06-01 23:00:04:Using GLSurfaceView Typically you use GLSurfaceView by subclassing it and overriding one or more of the View system input event methods. If your application does not need to override event methods then GLSurfaceView can be used as-is. For the most part GLSurfaceView behavior is customized by calling "set" methods rather than by subclassing. For example, unlike a regular View, drawing is delegated to a separate Renderer object which is registered with the GLSurfaceView using the setRenderer(android.opengl.GLSurfaceView.Renderer) call.<br><br>2022-06-01 22:16:39:如注释所说，isFinishing 可以用在 onPause 中判断，该 Activity 是单纯的 pause，还是正在 finish。 isFinishing 只是简单地返回 mFinished 的值，而 mfinished 在 finish() 方法中被赋值。  <br><br>2022-06-01 21:49:50:SurfaceView 和 Activity 生命周期  当使用 SurfaceView 时，请使用主界面线程之外的线程渲染 Surface。  对于具有 SurfaceView 的 Activity，存在两个单独但相互依赖的状态机：      应用 onCreate/onResume/onPause     已创建/更改/销毁的 Surface  当 Activity 启动时，您将按以下顺序获得回调：      onCreate()     onResume()     surfaceCreated()     surfaceChanged()  如果点击“返回”，您会获得：      onPause()     surfaceDestroyed()（在 Surface 消失前调用）<br>